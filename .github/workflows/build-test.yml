name: build-test

on:
  push:
    branches: [ "deploy/CI-CD" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    ## github actions에서 사용할 JDK 설정
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    ## application.properties 생성
    - name: make application.properties
      run: |
        cd ./src/main/resources
        touch ./application.properties
        echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./application.properties

    ## gradle caching (빌드 시간 줄이기)
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    ## Gradle 실행 권한 부여
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    ## Gradle 빌드(테스트 실행 x)
    - name: Build with Gradle
      run: ./gradlew build -x test

    ## docker 빌드
    - name: Docker build
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build --platform linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/baba .
        docker push ${{ secrets.DOCKER_USERNAME }}/baba:latest

    ## aws ec2 배포
    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }} # EC2 인스턴스 퍼블릭 DNS
        username: ec2-user
        key: ${{ secrets.PRIVATE_KEY }} # pem 키
        # 도커 작업
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/baba:latest
          docker stop $(docker ps -q --filter 'name=baba')
          docker rm $(docker ps -a -q --filter 'name=baba' )
          docker run -d --log-driver=syslog -p 8080:8080 --name baba ${{ secrets.DOCKER_USERNAME }}/baba:latest
          docker image prune -a -f
